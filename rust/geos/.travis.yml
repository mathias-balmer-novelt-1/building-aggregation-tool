language: rust

dist: groovy

rust:
  - stable
  - beta
  - nightly

matrix:
  allow_failures:
    - rust: nightly

before_install:
  - sudo apt-get update
  - sudo apt-get install valgrind
  - sudo apt-get remove libgeos-dev -y

script:
  # First we install the 3.8 version of libgeos
  - git clone https://github.com/libgeos/geos
  - cd geos
  # checking out 3.8.1 version
  - git checkout 24650422b3982f17cc493fe92a70228f2ad624b4
  - ./autogen.sh
  - ./configure
  - make
  - sudo make install
  - sudo ldconfig
  - cd ..
  - export LD_LIBRARY_PATH=/usr/local/lib
  # Now we can run tests
  - cargo build
  - cargo build --features v3_8_0
  - cargo build --features v3_7_0
  - cargo build --features v3_6_0
  - cargo test --features v3_8_0
  - cargo test --features v3_7_0
  - cargo test --features v3_6_0
  - cargo test --features geo
  - cargo test --features json
  - cargo test --features 'v3_8_0,geo,json'
  - cargo test
  - cargo doc --features dox
  - cargo doc
  - cargo run --example verbose_example
  - cargo run --example prepared_geom
  - cargo run --features geo --example prepared_geom
  - cargo run --example from_geo
  - cargo run --features geo --example from_geo
  # run valgrind to check that there are no memoryleaks
  # Note: cargo seems to randomly name the executable, so we use find to find all the tests
  #
  # As long as leaks come from "geos::geom::GeometryFactory::getDefaultInstance", then
  # it's fine (singleton).
  - find ./target/debug/deps -name "geos*"  -type f -executable | xargs -n 1 valgrind --leak-check=full --error-exitcode=42 --show-leak-kinds=all
  - valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/from_geo
  - valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/verbose_example
  - valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/prepared_geom
